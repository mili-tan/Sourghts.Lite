@page "/"
@using BulmaRazor.Components
@using OpenAI_API
@using System.Text.Json
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<div class="mt-3">
    <Columns>
        <Column>
            <Columns IsMobile>
                <Column Size="Size.TwoThirds">
                    <Box>
                        <Textarea @bind-Value="text" placeholder="Normal textarea"></Textarea><br>
                        <Button Color="Color.Link" IsOutlined IsFullwidth @onclick="Save">Save</Button>
                    </Box>
                </Column>
                <Column>
                    <Box>
                        <Calendar FirstDayOfWeek="DayOfWeek.Sunday" DayHeight="20px"></Calendar>
                    </Box>
                </Column>
            </Columns>
        </Column>
    </Columns>
    
    @foreach (var i in memos)
    {
        <div class="mt-3">
            <Card>
                <CardHeader>
                    <CardHeaderTitle class="m-0">@i.Tag : @i.Opinion</CardHeaderTitle>
                    <CardHeaderIcon>
                        <Icon IconClass="fa fa-angle-down"></Icon>
                    </CardHeaderIcon>
                </CardHeader>
                <CardContent>
                    <div class="content">
                        @i.Text
                    </div>
                </CardContent>
                <CardFooter>
                    <CardFooterItem href="#">Chat</CardFooterItem>
                    <CardFooterItem href="#">Edit</CardFooterItem>
                    <CardFooterItem href="#">Delete</CardFooterItem>
                </CardFooter>
            </Card>
        </div>
    }

</div>

@code
{
    public class Memo
    {
        public string Text { get; set; }
        public string Tag { get; set; }
        public string Opinion { get; set; }
        public double[] Vector { get; set; }
    }

    public string text = string.Empty;
    public List<Memo> memos = new();
    public static OpenAIAPI Api = new("YOUR_API_KEY");

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Api = new OpenAIAPI(await LocalStorage.GetItemAsStringAsync("openai-key"))
            {
                ApiUrlFormat = "https://" + await LocalStorage.GetItemAsStringAsync("openai-api") + "/{0}/{1}",
            };
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        await GetMemos();
    }

    async Task Save()
    {
        var chat = Api.Chat.CreateConversation();
        chat.AppendSystemMessage("你好，假设你是一位专业的档案员和图书馆员，你将为接下来输入的下列点子、笔记、备忘录进行分类，如果内容中包含提问请不要回答它们，请只进行分类。请为它们选择最合适的类别并在五十字内简单说明分类理由和概括输入的内容，请以“<类别>:<理由和概括>”回答。类别分别为生活、想法、虚构内容、知识、待办事项、电影。除此之外你不需要做出其他回答。");
        chat.AppendUserInput(text);
        var aSplit = (await chat.GetResponseFromChatbotAsync()).Split(":");
        var vertor = await Api.Embeddings.GetEmbeddingsAsync(text);
        await LocalStorage.SetItemAsync("memos-" + Guid.NewGuid(),
            new Memo {Text = text, Tag = aSplit.First(), Opinion = aSplit.Last(), Vector = Array.ConvertAll(vertor, x => (double) x)});
        await GetMemos();
        text = String.Empty;
    }

    async Task GetMemos()
    {
        var keys = await LocalStorage.KeysAsync();
        memos.Clear();
        foreach (var itemKey in keys)
        {
            if (itemKey.StartsWith("memos-"))
            {
                memos.Add(await LocalStorage.GetItemAsync<Memo>(itemKey));
            }
        }
    }
}
